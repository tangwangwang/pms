<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- status: 这个用于设置 Log4j2 自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!-- monitorInterval: Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<configuration status="TRACE" monitorInterval="300">
    <Properties>
        <!--自定义一些常量，之后使用${变量名}引用-->
        <!-- tomcat 根路径 -->
        <property name="TOMCAT_HOME">${sys:catalina.home}/logs</property>
        <!-- user 根路径 -->
        <property name="USER_HOME">${sys:user.home}/logs</property>
        <property name="MAX_LOG_SIZE">100MB</property>
        <property name="CHARSET">UTF-8</property>
    </Properties>
    <!--appenders:定义输出内容,输出格式,输出方式,日志保存策略等,常用其下三种标签[console,File,RollingFile]-->
    <appenders>
        <!--console :控制台输出的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--PatternLayout :输出日志的格式,LOG4J2 定义了输出代码,详见第二部分-->
            <PatternLayout charset="${CHARSET}" pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
        </console>
        <!--File :同步输出日志到本地文件-->
        <!--append="false" :根据其下日志策略,每次清空文件重新输入日志,可用于测试-->
        <File name="log" fileName="${TOMCAT_HOME}/log4j2.log" append="false">
            <PatternLayout charset="${CHARSET}" pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>
        <!--SMTP :邮件发送日志-->
        <!--<SMTP name="Mail" subject="****SaaS系统正式版异常信息" to="message@message.info" from="message@lengjing.info"
              smtpUsername="message@message.info" smtpPassword="LENG****1234" smtpHost="mail.lengjing.info"
              smtpDebug="false" smtpPort="25" bufferSize="10">
            <PatternLayout pattern="[%-5p]:%d{YYYY-MM-dd HH:mm:ss} [%t] %c{1}:%L - %msg%n"/>
        </SMTP>-->
        <RollingFile name="debug" fileName="${TOMCAT_HOME}/debug.log"
                     filePattern="${TOMCAT_HOME}/$${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout charset="${CHARSET}" pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="${MAX_LOG_SIZE}"/>
            </Policies>
        </RollingFile>
        <RollingFile name="info" fileName="${TOMCAT_HOME}/info.log"
                     filePattern="${TOMCAT_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
            <!--ThresholdFilter :日志输出过滤-->
            <!--level="info" :日志级别,onMatch="ACCEPT" :级别在info之上则接受,onMismatch="DENY" :级别在info之下则拒绝-->
            <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout charset="${CHARSET}" pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <!-- Policies :日志滚动策略-->
            <Policies>
                <!-- TimeBasedTriggeringPolicy :时间滚动策略,默认0点小时产生新的文件,interval="6" : 自定义文件滚动时间间隔,每隔6小时产生新文件, modulate="true" : 产生文件是否以0点偏移时间,即6点,12点,18点,0点-->
                <TimeBasedTriggeringPolicy interval="6" modulate="true"/>
                <!-- SizeBasedTriggeringPolicy :文件大小滚动策略-->
                <SizeBasedTriggeringPolicy size="${MAX_LOG_SIZE}"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <RollingFile name="warn" fileName="${TOMCAT_HOME}/warn.log"
                     filePattern="${TOMCAT_HOME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout charset="${CHARSET}" pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="${MAX_LOG_SIZE}"/>
            </Policies>
        </RollingFile>
        <RollingFile name="error" fileName="${TOMCAT_HOME}/error.log"
                     filePattern="${TOMCAT_HOME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout charset="${CHARSET}" pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="${MAX_LOG_SIZE}"/>
            </Policies>
        </RollingFile>

        <Async name="asyncLog">
            <AppenderRef ref="log"/>
        </Async>
        <Async name="asyncDebug">
            <AppenderRef ref="debug"/>
        </Async>
        <Async name="asyncInfo">
            <AppenderRef ref="info"/>
        </Async>
        <Async name="asyncWarn">
            <AppenderRef ref="warn"/>
        </Async>
        <Async name="asyncError">
            <AppenderRef ref="error"/>
        </Async>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <!--Logger节点用来单独指定日志的形式，name为包路径,比如要为org.springframework包下所有日志指定为INFO级别等。 -->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        <!-- druid 打印 SQL 配置 -->
        <logger name="druid.sql.Statement" level="DEBUG" additivity="false"/>
        <logger name="druid.sql.ResultSet" level="DEBUG" additivity="false"/>
        <!-- Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出 -->
        <root level="ALL">
            <!--输出到控制台-->
            <appender-ref ref="Console"/>
            <!-- 输出到文件 -->
            <appender-ref ref="asyncLog"/>
            <!-- 输出到SQL文件 -->
            <appender-ref ref="asyncDebug"/>
            <!--Info输出到文件-->
            <appender-ref ref="asyncInfo"/>
            <!--Warn输出到文件-->
            <appender-ref ref="asyncWarn"/>
            <!--Error输出到文件-->
            <appender-ref ref="asyncError"/>
        </root>
        <!-- AsyncLogger :异步日志,LOG4J有三种日志模式,全异步日志,混合模式,同步日志,性能从高到底,线程越多效率越高,也可以避免日志卡死线程情况发生-->
        <!-- additivity="false" : additivity设置事件是否在root logger输出，为了避免重复输出，可以在Logger 标签下设置additivity为”false”-->
        <!--<AsyncLogger name="asyncLoggerError" level="trace" includeLocation="true" additivity="false">
            <appender-ref ref="rollingFileError"/>
        </AsyncLogger>-->
    </loggers>
</configuration>